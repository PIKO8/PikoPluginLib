# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

on:
  push:
    branches: [ "master" ]
    paths:
      - '**/gradle/**'
      - '**/build.gradle'
      - '**/settings.gradle'
      - '**/*.java'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    - name: Set execute permissions on gradlew
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Get version from build.gradle
      id: get_version
      run: |
        VERSION=$(./gradlew -q --console=plain printVersion)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Create tag and push
      run: |
        git config --global credential.helper store
        git tag "v${{ env.VERSION }}" || true
        git push origin "v${{ env.VERSION }}" --force
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete existing release
      id: delete_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        tag_name="v${{ env.VERSION }}"
        release_url=$(curl -s -X GET \
          https://api.github.com/repos/${{ github.repository }}/releases/tags/${tag_name} \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Accept: application/json" \
          | jq -r '.url')

        if [ "$release_url" != "null" ]; then
          echo "Deleting existing release..."
          curl -s -X DELETE \
            $release_url \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/json"
        fi

    - name: Create new release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/create-release@v1
      with:
        tag_name: "v${{ env.VERSION }}"
        release_name: "Release v${{ env.VERSION }}"
        draft: false
        prerelease: false
      id: create_release
      
    - name: Get release upload URL
      id: get_upload_url
      run: |
        echo "Upload URL: ${{ steps.create_release.outputs.upload_url }}"
        echo "UPLOAD_URL=$(echo ${{ steps.create_release.outputs.upload_url }} | sed 's/{?name,label}//')" >> $GITHUB_ENV

    - name: Upload jar file to release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ env.UPLOAD_URL }}
        asset_path: build/libs/PikoPluginLib-${{ env.VERSION }}.jar
        asset_name: PikoPluginLib-${{ env.VERSION }}.jar
        asset_content_type: application/java-archive
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to GitHub Packages
      run: ./gradlew publish
      env:
        USERNAME: ${{ secrets.USERNAME }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
