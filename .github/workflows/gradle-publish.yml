# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

on:
  push:
    branches: [ "master" ]
    paths:
      - '**/gradle/**'
      - '**/build.gradle'
      - '**/settings.gradle'
      - '**/*.java'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: github
        settings-path: ${{ github.workspace }}

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
      
    - name: Set execute permissions on gradlew
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Get version from build.gradle
      id: get_version
      run: |
        VERSION=$(./gradlew -q --console=plain printVersion)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Create tag and push
      run: |
        git config --global credential.helper store
        git tag "v${VERSION}" || true
        git push origin "v${VERSION}" --force
      env:
        USERNAME: ${{ secrets.USERNAME }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_CREDENTIALS: ${{ secrets.GITHUB_TOKEN }}

    - name: Set VERSION variable
      run: |
        VERSION=$(git describe --tags --abbrev=0 | sed 's/^v//')
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Create or update release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        RELEASE_ID=$(curl -s -X GET \
          https://api.github.com/repos/${GITHUB_REPO}/releases/tags/${tag_name} \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Accept: application/json" \
          | jq '.id' | wc -l)
        if [ $RELEASE_ID -gt 0 ]; then
          # Update existing release
          curl -s -X PATCH \
            https://api.github.com/repos/${GITHUB_REPO}/releases/${RELEASE_ID} \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/json" \
            -d '{"name":"Release v${{ env.VERSION }}","tag_name":"v${{ env.VERSION }}","prerelease":false,"draft":false}'
          # Update release assets
          curl -s -X POST \
            https://api.github.com/repos/${GITHUB_REPO}/releases/${RELEASE_ID}/assets \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/json" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @build/libs/PikoPluginLib-${{ env.VERSION }}.jar
        else
          # Create new release
          uses: actions/create-release@v1
          with:
            tag_name: "v${{ env.VERSION }}"
            release_name: "Release v${{ env.VERSION }}"
            draft: false
            prerelease: false
        fi
      id: create_release

    - name: Upload jar file to release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/libs/PikoPluginLib-${{ env.VERSION }}.jar
        asset_name: PikoPluginLib-${{ env.VERSION }}.jar
        asset_content_type: application/java-archive

    - name: Publish to GitHub Packages
      run: ./gradlew publish
      env:
        USERNAME: ${{ secrets.USERNAME }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
